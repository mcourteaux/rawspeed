name: CI - Static Analysis

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  linux:
    name: ${{ matrix.os }}.${{ matrix.compiler.compiler }}.${{ matrix.flavor }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ linux ]
        compiler:
          - { compiler: LLVM12, CC: clang-12, CXX: clang++-12 }
        flavor: [ ClangStaticAnalysis, CodeQLAnalysis ]
    container: debian:unstable-slim
    steps:
      - name: Configure APT
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # Paper over occasional network flakiness of some mirrors.
          echo 'Acquire::Retries "10";' > /etc/apt/apt.conf.d/80retry
          # Do not install recommended packages
          echo 'APT::Install-Recommends "false";' > /etc/apt/apt.conf.d/80recommends
          # Do not install suggested packages
          echo 'APT::Install-Suggests "false";' > /etc/apt/apt.conf.d/80suggests
          # Assume yes
          echo 'APT::Get::Assume-Yes "true";' > /etc/apt/apt.conf.d/80forceyes
          # Fix broken packages
          echo 'APT::Get::Fix-Missing "true";' > /etc/apt/apt.conf.d/80fixmissing
      - name: Install/Update necessary packages
        run: |
          rm -rf /var/lib/apt/lists/*;
          apt-get update;
          apt-get upgrade;
          apt-get install ca-certificates \
                          clang++-12 \
                          clang-tidy-12 \
                          clang-tools-12 \
                          cmake \
                          git \
                          googletest \
                          libjpeg-dev \
                          libomp-12-dev \
                          libpugixml-dev \
                          libxml2-utils \
                          make \
                          ninja-build \
                          zlib1g-dev;
          apt-get clean;
          dpkg-divert --add --rename --divert /usr/bin/ld.original /usr/bin/ld;
          ln -s /usr/bin/ld.gold /usr/bin/ld;
          ln -s /usr/bin/clang-12 /usr/local/bin/clang;
          ln -s /usr/bin/clang++-12 /usr/local/bin/clang++;
          ln -s /usr/bin/clang-tidy-12 /usr/local/bin/clang-tidy
          ln -s /usr/local/bin/clang /usr/local/bin/gcc;
          ln -s /usr/local/bin/clang++ /usr/local/bin/g++;
      - uses: actions/checkout@v2
        name: Fetch/Checkout RawSpeed git repo
        with:
          path: ''
      - if: matrix.flavor == 'ClangStaticAnalysis'
        name: Fetch/Checkout CodeChecker git repo (for static analysis)
        uses: actions/checkout@v2
        with:
          repository: 'Ericsson/codechecker'
          path: 'codechecker'
          fetch-depth: '1'
      - if: matrix.flavor == 'ClangStaticAnalysis'
        name: Move CodeChecker git repo into right place
        run: |
          mv codechecker ..
      - if: matrix.flavor == 'ClangStaticAnalysis'
        name: Install CodeChecker (for static analysis)
        env:
          CC: ${{ matrix.compiler.CC }}
          CXX: ${{ matrix.compiler.CXX }}
        run: |
          rm -rf /var/lib/apt/lists/*;
          apt-get update;
          apt-get install curl \
                          libxml2-dev \
                          libxslt1-dev \
                          python-pip-whl \
                          python3-dev \
                          python3-lxml \
                          python3-portalocker \
                          python3-psutil \
                          python3-venv \
                          python3-virtualenv \
                          python3-wheel \
                          python3-yaml;
          apt-get clean;
          cd ../codechecker
          make venv
          . $PWD/venv/bin/activate
          BUILD_LOGGER_64_BIT_ONLY=YES BUILD_UI_DIST=NO make package
          export PATH="$PWD/build/CodeChecker/bin:$PATH"
      - if: matrix.flavor == 'CodeQLAnalysis'
        name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: cpp
      - name: Build And Test
        env:
          CC: ${{ matrix.compiler.CC }}
          CXX: ${{ matrix.compiler.CXX }}
          SRC_DIR: ${{ github.workspace }}
          BUILD_DIR: ${{ github.workspace }}/../rawspeed-build
          INSTALL_PREFIX: ${{ github.workspace }}/../rawspeed-install
          ECO: -DALLOW_DOWNLOADING_GOOGLETEST=ON
          FLAVOR: ${{ matrix.flavor }}
          TARGET: build
        run: |
          if [ ${FLAVOR} = "ClangStaticAnalysis" ]; then
            export ECO="${ECO} -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DUSE_CLANG_TIDY=ON -DCMAKE_C_FLAGS_RELWITHDEBINFO=-UNDEBUG -DCMAKE_CXX_FLAGS_RELWITHDEBINFO=-UNDEBUG";
          fi;
          cmake -E make_directory "${BUILD_DIR}";
          cmake -E make_directory "${INSTALL_PREFIX}";
          "${SRC_DIR}/.ci/ci-script.sh";
      - if: matrix.flavor == 'ClangStaticAnalysis'
        name: Perform clang static analysis
        env:
          SRC_DIR: ${{ github.workspace }}
          BUILD_DIR: ${{ github.workspace }}/../rawspeed-build
        run: |
          . "$PWD/../codechecker/venv/bin/activate"
          export PATH="$PWD/../codechecker/build/CodeChecker/bin:$PATH"
          CodeChecker check --logfile "${BUILD_DIR}/compile_commands.json" --analyzers clangsa --jobs "$(nproc --all)" --file "${SRC_DIR}/*" --disable deadcode.DeadStores
      - if: matrix.flavor == 'CodeQLAnalysis'
        name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v1
